# GitHub Action Workflow to Deploy Node.js App to DockerHub and AWS ElasticBeanstalk
#
# Version      Date        Info
# 1.0          2022        First Version
#
# Made by Dmitry Solomatin
#---------------------------------------------------------------------
name: CI-CD to DockerHub and AWS EBS
env:
  S3_BUCKET_NAME : "node.js-app"
  APPLICATION_NAME       : "Node.js-App"
  ENVIRONMENT_NAME       : "Nodejsapp-env"
  DEPLOY_PACKAGE_NAME       : "node.js-app-${{ github.sha }}.zip"
  AWS_REGION_NAME           : "eu-north-1"

# Controls when the workflow will run
on:
  # Triggers the workflow on push or pull request events but only for the "main" branch
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  docker_stage:
    runs-on: ubuntu-latest

    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - uses: actions/checkout@v1

      - name: Check Out Repo 
        uses: actions/checkout@v1

      - name: Login to Docker Hub
        uses: docker/login-action@v1
        with:
          username: ${{ secrets.DOCKER_HUB_USERNAME }}
          password: ${{ secrets.DOCKER_HUB_ACCESS_TOKEN }}

      - name: Set up Docker Buildx
        id: buildx
        uses: docker/setup-buildx-action@v1

      - name: Build and push
        id: docker_build
        uses: docker/build-push-action@v2
        with:
          context: ./
          docker: ./Dockerfile
          push: true
          tags: ${{ secrets.DOCKER_HUB_USERNAME }}/node-app-${{ github.sha }}

      - name: Image digest
        run: echo ${{ steps.docker_build.outputs.digest }}

  ci_to_AWS:
       runs-on: ubuntu-latest
       
       steps:
         - name: Git clone our repository
           uses: actions/checkout@v1
            
         - name: Create ZIP deployment package
           run : zip -r ${{ env.DEPLOY_PACKAGE_NAME }} ./  -x  *.git*
           
         - name: Configure my AWS Credentils
           uses: aws-actions/configure-aws-credentials@v1
           with:
             aws-access-key-id    : ${{ secrets.MY_AWS_ACCESS_KEY }}
             aws-secret-access-key: ${{ secrets.MY_AWS_SECRET_KEY }}
             aws-region           : ${{ env.AWS_REGION_NAME }}
         - name: Copy Deployment package to S3 bucket in AWS
           run : aws s3 cp ${{ env.DEPLOY_PACKAGE_NAME }} s3://${{ env.S3_BUCKET_NAME}}/
         
         - name: Print nice message on completion of CI Pipeline
           run : echo "CI to AWS finished successfully!"
           
  cd_to_AWS:
       runs-on: ubuntu-latest
       needs: [ci_to_AWS]
       
       steps:
         - name: Configure AWS Credentials in account
           uses: aws-actions/configure-aws-credentials@v1
           with:
             aws-access-key-id    : ${{ secrets.MY_AWS_ACCESS_KEY }}
             aws-secret-access-key: ${{ secrets.MY_AWS_SECRET_KEY }}
             aws-region           : ${{ env.AWS_REGION_NAME }}
         
         - name: Create new ElasticBeanstalk Applicaiton Version
           run : |
            aws elasticbeanstalk create-application-version \
            --application-name ${{ env.APPLICATION_NAME }} \
            --source-bundle S3Bucket="${{ env.S3_BUCKET_NAME }}",S3Key="${{ env.S3_BUCKET_NAME }}" \
            --source-bundle S3Bucket="${{ env.S3_BUCKET_NAME }}",S3Key="${{ env.DEPLOY_PACKAGE_NAME }}" \
            --version-label "Ver-${{ github.sha }}" \
            --description "CommitSHA-${{ github.sha }}"
         - name: Deploy our new Application Version
           run : aws elasticbeanstalk update-environment --environment-name ${{ env.ENVIRONMENT_NAME }} --version-label "Ver-${{ github.sha }}-"
           
         - name: Print nice message on completion of CI-CD Pipeline
           run : echo "CD to AWS part finished successfully!"  
